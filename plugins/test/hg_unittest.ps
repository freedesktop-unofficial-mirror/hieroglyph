% initialize unittest dictionary
10 dict dup begin
    /nunit 0 def
    /nsuccess 0 def
    /nfailure 0 def
    /.ostack null def
    /expectederror null def
    /expectedostack null def
    /actualerror null def
    /actualostack null def
    /verbose true def
    /expression null def
end /.unittestdict exch def

% - initunittest -
/initunittest {
    .unittestdict begin
	/nunit 0 def
	/nsuccess 0 def
	/nfailure 0 def
    end
} bind odef

% -array- -name- -bool- initunittestdict -
/initunittestdict {
    .unittestdict begin
	/verbose exch def
	/expectederror exch def
	/expectedostack exch def
    end
} bind odef

% proc unittest -bool-
/unittest {
    .dounittest
    .unittestdict .validateunittest
    .unittestdict begin
	/nunit nunit 1 add def
	{
	    /nsuccess nsuccess 1 add def
	} {
	    /nfailure nfailure 1 add def
	} ifelse
    end
} bind odef

% proc .dounittest -
/.dounittest {
    % back the ostack up into dict
    count copy pop count 1 sub 2 idiv array astore .unittestdict /.ostack 3 -1 roll put
    dup .unittestdict /expression 3 -1 roll put
    {exec} stopped {
	$error /newerror get {
	    $error /errorname get .unittestdict /actualerror 3 -1 roll put
	} {
	    .unittestdict /actualerror /stop put
	} ifelse
    } {
	.unittestdict /actualerror null put
    } ifelse
    count .unittestdict /.ostack get length sub copy
    count .unittestdict /.ostack get length sub 2 idiv array astore
    .unittestdict /actualostack 3 -1 roll put
    % recover
    clear .clearerror
    .unittestdict /.ostack get aload pop
} bind odef

% - unittestresult -
/unittestresult {
    .unittestdict begin
	nunit 128 string cvs ( Unit(s) / )
	nsuccess 128 string cvs ( Success(es) / )
	nfailure 128 string cvs ( Failure(s))
	.concatstring .concatstring .concatstring .concatstring .concatstring
	=
    end
} bind odef
